#!/usr/bin/env node
// vi: ft=javascript

/*
 * Copyright Â© 2008-2011, Tom Adams
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR
 * BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
 * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

var ncurses, Cali, moveCmd;

ncurses = require('ncurses');

//try:
//    import configparser
//except ImportError:
//    import ConfigParser as configparser

Cali = function () {
  this.__init__.apply(this,arguments)
}

/***
 * Exceptions
 ***/

Cali.prototype.Quit = function() {
}

/***
 * Decorators and utility functions
 ***/

Cali.prototype.util = {}

Cali.prototype.util.update = function(fn) {
  return function() {
    var oldtoday = this.cali.today
    fn.call(this)
    if (oldtoday.month === this.cali.today.month && oldtoday.year === this.cali.today.year)
      this.cali.movecursor(oldtoday)
    else
      this.cali.displaycal()
    this.cali.displayevents()
  }
}

//TODO: may need to change this to decorator style like update
Cali.prototype.util.bounce = function(stdscr, fn) {
  var y = stdscr.getyx()[0],
      x = stdscr.getyx()[1]

  fn()

  stdscr.move(y, x)
}

/***
 * Main methods
 ***/

Cali.prototype.__init__ = function(files) {
  if (files === undefined)
    files = []

  this.KEYBINDINGS = {
    quit:      ['q'],
    refresh:   [12],                        // C-l
    tomorrow:  ['l', ncurses.keys.RIGHT, 6], // C-f
    yesterday: ['h', ncurses.keys.LEFT,  2], // C-b
    nextweek:  ['j', ncurses.keys.DOWN, 14], // C-n
    prevweek:  ['k', ncurses.keys.UP,   16], // C-p
    nextmonth: ['n', ncurses.keys.NPAGE],
    prevmonth: ['p', ncurses.keys.PPAGE],
    nextyear:  ['}'],
    prevyear:  ['{'],
    nextevent: ['w'],
    prevevent: ['b']
  }

  this.CONFIG_FILE = '$XDG_CONFIG_HOME/cali/config'

  this.config = {dates: []}
  this.load_config()
  if (files.length)
    this.config['dates'] = files

  //lc_all = os.environ['LC_ALL'] if 'LC_ALL' in os.environ else 'C'
  //locale.setlocale(locale.LC_ALL, lc_all)
  //if 'LC_TIME' in os.environ:
  //    locale.setlocale(locale.LC_TIME, os.environ['LC_TIME'])

  this.today = new Date
  this.days = {}
  this.dates = {}
  this.events = []

  //for (var date_file in this.config['dates']) {
  //    with open(this.expandpath(date_file)) as f:
  //        for var l in f.readlines():
  //            line = l.strip()
  //            d = re.match('(\d{4})-(\d{2})-(\d{2})', line)
  //            if d:
  //                date = datetime.date(*[int(x) for x in d.groups()])
  //                this.dates.setdefault(date, [])
  //                this.dates[date].append(line)
  //}

  this.key = {}
  for (var v in this.KEYBINDINGS) {
    var k = this.KEYBINDINGS[v]
    for (var kk in k)
      this.key[kk] = v
  }
}

//    def load_config(self):
//        if os.path.exists(self.expandpath(self.CONFIG_FILE)):
//            cfg = configparser.ConfigParser()
//            cfg.read(self.expandpath(self.CONFIG_FILE))
//            if 'dates' in cfg.defaults():
//                d = cfg.defaults()['dates']
//                if d:
//                    self.config['dates'] = [d]

//    def expandpath(self, p):
//        if 'XDG_CONFIG_HOME' not in os.environ:
//            os.environ['XDG_CONFIG_HOME'] = '~/.config'
//        return os.path.expanduser(os.path.expandvars(p))

Cali.prototype.run = function() {
  try {
    this.stdscr = ncurses.initscr()
    ncurses.cbreak()
    ncurses.noecho()
    this.stdscr.keypad(1)
    this.mainloop()
  } finally {
    ncurses.nocbreak()
    this.stdscr.keypad(0)
    ncurses.echo()
    ncurses.endwin()
  }
}

Cali.prototype.mainloop = function() {
  this.displaycal()
  this.displayevents()
  try {
    while (true) {
      var c = this.stdscr.getch()
      if (c in this.key)
        this.move(this.key[c])
    }
  } catch (e) {
    if (typeof e !== this.Quit)
      throw e
  }
}

Cali.prototype.displaycal = function() {
  this.stdscr.clear()
  this.stdscr.move(0,0)
  this.stdscr.addstr(strftime.strftime('   %B %Y', this.today))
  this.stdscr.move(1,0)

  this.stdscr.addstr(this.weekdays().join(' '))
  this.stdscr.move(2,0)
  this.displaydays()
  this.stdscr.refresh()
}

Cali.prototype.displaydays = function() {
  var counter = this.first() - datetime.timedelta(this.first().getDay()),
      before_month = true,
      after_month = false

  while (!after_month) {
    if (counter.month === this.today.month && before_month)
      before_month = False
    else if (counter.month !== this.today.month && !before_month)
      after_month = True

    if (before_month || after_month) {
      this.stdscr.addstr('   ')
      if (after_month)
        this.stdscr.move(this.stdscr.getyx()[0]+1, 0)
    } else {
      this.days[counter.day] = this.stdscr.getyx()
      if (counter === this.today)
        var y = this.stdscr.getyx()[0], x = this.stdscr.getyx()[1]
      this.drawdate(counter, highlight=(counter==this.today))
    }

    if (counter.isoweekday() === 6)
      this.stdscr.move(this.stdscr.getyx()[0]+1, 0)
    counter += datetime.timedelta(1)
  }

  this.stdscr.move(y,x+1)
}

Cali.prototype.displayevents = function() {
  this.bounce(this.stdscr, function() {
    var y = this.days[this.last().day][0]
    for (var e in this.events) {
      y += 2
      this.stdscr.move(y,0)
      this.stdscr.addstr(' '*e[1])
    }
  })

  this.events = []
  if (this.today in this.dates) {
    this.bounce(this.stdscr, function() {
      var y = this.days[this.last().day][0]
      for (var l in this.dates[this.today]) {
        y += 2
        this.stdscr.move(y,0)
        this.stdscr.addstr(l)
        this.events.append(this.stdscr.getyx())
      }
    })
  }
}

Cali.prototype.movecursor = function(old) {
  var a = this.days[old.day]
  this.stdscr.move(a[0], a[1])
  this.drawdate(old, highlight=False)

  a = this.days[this.today.day]
  this.stdscr.move(a[0], a[1])
  this.drawdate(this.today, highlight=True)
  this.stdscr.move(a[0], a[1]+1)
}

Cali.prototype.drawdate = function(date, highlight) {
  if (date in this.dates)
    this.stdscr.attron(ncurses.attrs.UNDERLINE)
  if (highlight)
    this.stdscr.attron(ncurses.attrs.REVERSE)
  this.stdscr.addstr('%2d' % date.day)
  if (highlight)
    this.stdscr.attroff(ncurses.attrs.REVERSE)
  if (date in this.dates)
    this.stdscr.attroff(ncurses.attrs.UNDERLINE)
  this.stdscr.addstr(' ')
}

Cali.prototype.move = function(to) {
  this.Actions(this).__getattribute__(to)()
}

Cali.prototype.weekdays = function() {
  var wds = [],
      counter = this.today - datetime.timedelta(this.today.isoweekday()),
      n = 0
  while (n < 7) {
    //TODO: handle widechars correctly
    wds.append(counter.strftime('%a').slice(0,2))
    counter += datetime.timedelta(1)
    n += 1
  }
  return wds
}

Cali.prototype.first = function() {
  return datetime.date(this.today.year, this.today.month, 1)
}

Cali.prototype.last = function() {
  var newlast = this.today,
      last
  while (newlast.month === this.today.month)
    last = newlast
    newlast += datetime.timedelta(1)
  return last
}

/***
 * Actions
 ***/

Cali.prototype.Actions = function() {
  this.__init__.apply(this, arguments)
}

Cali.prototype.Actions.prototype.__init__ = function(cali) {
  this.cali = cali
}

Cali.prototype.Actions.prototype.quit = function() {
  throw this.cali.Quit
}

Cali.prototype.Actions.prototype.refresh = function() {
  this.cali.displaycal()
  this.cali.displayevents()
}

/***
 * Movement commands
 ***/

moveCmd = {
  tomorrow: function() { this.cali.today += datetime.timedelta(1) },
  yesterday: function() { this.cali.today -= datetime.timedelta(1) },
  nextweek: function() { this.cali.today += datetime.timedelta(7) },
  prevweek: function() { this.cali.today -= datetime.timedelta(7) },
  nextmonth: function() {
    var oldtoday = this.cali.today
    this.cali.today += datetime.timedelta(4*7)
    if (this.cali.today.month === oldtoday.month)
      this.cali.today += datetime.timedelta(7)
  },
  prevmonth: function() {
    var oldtoday = this.cali.today
    this.cali.today -= datetime.timedelta(4*7)
    if (this.cali.today.month === oldtoday.month)
      this.cali.today -= datetime.timedelta(7)
  },
  nextyear: function() {
    var oldtoday = this.cali.today
    this.cali.today += datetime.timedelta(52*7)
    while (this.cali.today.year === oldtoday.year || this.cali.today.month != oldtoday.month)
      this.cali.today += datetime.timedelta(7)
  },
  prevyear: function() {
    var oldtoday = this.cali.today
    this.cali.today -= datetime.timedelta(52*7)
    while (this.cali.today.year === oldtoday.year || this.cali.today.month != oldtoday.month)
      this.cali.today -= datetime.timedelta(7)
  },
  nextevent: function() {
    for (var d in sorted(this.cali.dates.keys()))
      if (d > this.cali.today) {
        this.cali.today = d
        break
      }
  },
  prevevent: function() {
    for (var d in reversed(sorted(this.cali.dates.keys())))
      if (d < this.cali.today) {
        this.cali.today = d
        break
      }
  },
}

for (var name in moveCmd)
  Cali.prototype.Actions.prototype[name] = Cali.prototype.util.update(moveCmd[name])

new Cali(process.argv.slice(1)).run()
